"""Console water delivery bot."""

import csv
import json
import os
from datetime import datetime


CLIENTS_FILE = "clients.json"
ORDERS_FILE = "orders.csv"
PRICE_PER_BOTTLE = 100


def load_clients() -> dict:
    if os.path.exists(CLIENTS_FILE):
        with open(CLIENTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_clients(clients: dict) -> None:
    with open(CLIENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(clients, f, ensure_ascii=False, indent=2)


def load_last_order(phone: str) -> dict | None:
    if not os.path.exists(ORDERS_FILE):
        return None
    last = None
    with open(ORDERS_FILE, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row.get("phone") == phone:
                last = {
                    "date": row["date"],
                    "name": row["name"],
                    "district": row["district"],
                    "phone": row["phone"],
                    "count": int(row["count"]),
                    "total": int(row["total"]),
                }
    return last


def append_order(order: dict) -> None:
    file_exists = os.path.exists(ORDERS_FILE)
    with open(ORDERS_FILE, "a", newline="", encoding="utf-8") as f:
        fieldnames = ["date", "name", "district", "phone", "count", "total"]
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
        writer.writerow(order)


def ask_bottle_count() -> int:
    while True:
        try:
            count = int(input("–°–∫–æ–ª—å–∫–æ –±—É—Ç—ã–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? "))
            if count <= 0:
                print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
                continue
            return count
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


def print_invoice(order: dict) -> None:
    print("\n==== –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç ====")
    print(f"–ö–ª–∏–µ–Ω—Ç: {order['name']} ({order['phone']})")
    print(f"–†–∞–π–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏: {order['district']}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–µ–π: {order['count']}")
    print(f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {order['total']} ‚ÇΩ")
    print("======================")


def start_call(phone: str) -> None:
    print("\nüìû Incoming call from", phone)

    clients = load_clients()
    client = clients.get(phone)
    if client:
        name = client["name"]
        district = client["district"]
        print(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name} –∏–∑ —Ä–∞–π–æ–Ω–∞ {district}!")
        last_order = load_last_order(phone)
        if last_order:
            ans = input(
                f"–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—à–ª—ã–π –∑–∞–∫–∞–∑ ({last_order['count']} –±—É—Ç—ã–ª–µ–π –∑–∞ {last_order['total']} ‚ÇΩ)? [y/n] "
            ).strip().lower()
            if ans == "y":
                order = {
                    "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
                    "name": name,
                    "district": district,
                    "phone": phone,
                    "count": last_order["count"],
                    "total": last_order["total"],
                }
                append_order(order)
                print_invoice(order)
                return
    else:
        print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç. –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.")
        name = input("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ")
        district = input("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω: ")
        clients[phone] = {"name": name, "district": district}
        save_clients(clients)

    print("\n–ù–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:")
    print(f" - –ë—É—Ç—ã–ª—å 19L: {PRICE_PER_BOTTLE} ‚ÇΩ")

    count = ask_bottle_count()
    total = count * PRICE_PER_BOTTLE
    order = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "name": name,
        "district": district,
        "phone": phone,
        "count": count,
        "total": total,
    }
    append_order(order)
    print_invoice(order)


if __name__ == "__main__":
    start_call("+79991234567")
